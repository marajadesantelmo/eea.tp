levels= c('Primario', 'Secundario', 'Universitario')),
#Teletrabajo
teletrabajo=factor(case_when(str_sub(PP04D_COD, start= 3, end =3) == 3 &
(PP04G == 6)~ "teletrabajo",
TRUE~"presencial")),
#Sector
sector = factor (case_when(str_sub(PP04B_COD, start = 1, end = 3) < 04 ~ "agro",
str_sub(PP04B_COD, start = 1, end = 3) > 04 &(str_sub(PP04B_COD, start = 1, end = 3) < 10) ~ "extractivo",
str_sub(PP04B_COD, start = 1, end = 3)> 09 &(str_sub(PP04B_COD, start = 1, end = 3) < 35) ~ "industria_manuf",
str_sub(PP04B_COD, start = 1, end = 3) > 34 &(str_sub(PP04B_COD, start = 1, end = 3) < 40) ~ "ss_publico",
str_sub(PP04B_COD, start = 1, end = 3) == 40 ~ "construcción",
str_sub(PP04B_COD, start = 1, end = 3) > 44 &(str_sub(PP04B_COD, start = 1, end = 3) < 54) ~ "comercio_y_transporte",
str_sub(PP04B_COD, start = 1, end = 3) > 44 &(str_sub(PP04B_COD, start = 1, end = 3) < 97) ~ "ss_personales_y_prof",
TRUE ~ "ss_domestico_y_otros"),
levels=c("agro", "extractivo", "industria_manuf",
"ss_publico","construcción", "comercio_y_transporte",
"ss_personales_y_prof", "ss_domestico_y_otros")),
#Genero
genero= factor(case_when(CH04== 1 ~ "hombre", TRUE~ "mujer"),
levels= c("hombre", 'mujer')),
#Region
region = factor(case_when(REGION == 01 ~ "Gran Buenos Aires",
REGION == 40 ~ "NOA",
REGION == 41 ~ "NEA",
REGION == 42 ~ "Cuyo",
REGION == 43 ~ "Pampeana",
REGION == 44 ~ "Patagonia"),
levels= c("Gran Buenos Aires", 'NOA', 'NEA', "Cuyo", "Pampeana", "Patagonia")),
ipcf = factor(case_when(DECCFR %in% 1:5  ~ "bajo",            ### VERIFICAR: Hice cambios en esta variable xq la catetgoría alta tenia 0 registros
DECCFR %in% 6:8  ~ "medio",
DECCFR %in% 9:10  ~ "alto"),
levels = c("bajo", "medio", "alto")),
subsidio = factor(case_when(V5_M == 0 ~ "no", TRUE~ "si"),
levels = c("no", "si")),
dependiente_cuidados= case_when(
CH06 < 18 | CH06 > 75   ~ "Dependiente",    #Menores 18 y adultos mayores de 75
TRUE       ~ "No dependiente")) %>%
group_by(CODUSU,NRO_HOGAR) %>%
mutate(qdependientes = sum(dependiente_cuidados=="Dependiente"),
dependientes= case_when(
qdependientes>0 ~ "Hogar con dependientes",
TRUE            ~ "Hogar sin dependientes")) %>%
ungroup()  %>%
filter(ESTADO==1 & CAT_OCUP==3) %>%                                 #Filtramos a asalariados ocupados
select(precariedad, genero, nivel_educativo, rango_etario,
sector, tamanio, complejidad, teletrabajo, subsidio, ipcf, dependientes, PONDERA) # Nos quedamos con las variables que entran para el modelo
#Chequeamos cuantas missings hay
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
#Nos quedamos con casos sin missings
df <- df[complete.cases(df), ]
### Hice la prueba con el boxplot, pero no me convence mucho. También hice la prueba graficando en un plot de barras apiladas los porcentajes de casos en cada categoría.
#Boxplot convirtiedo en numérica las categóricas que son ordinales
df %>% mutate(ipcf2=case_when(ipcf=="bajo"  ~ 1,
ipcf=="medio" ~ 2,
ipcf=="alto"  ~ 3)) %>%
ggplot(aes(x = precariedad , y =as.numeric(ipcf2))) +
geom_boxplot(aes(fill=precariedad))
##Grafico IPCF según precariedad
#Calculo los datos de porcentaje de casos
df %>% group_by(precariedad, ipcf) %>%
count() %>%
ungroup() %>%
group_by(precariedad) %>%
mutate(porc=n/sum(n)) %>%
ungroup() %>%
select(precariedad, ipcf, porc) %>%
ggplot(aes(x = precariedad , y=porc)) +     #Armo grafico de barras
geom_bar(aes(fill=ipcf), stat="identity", position = "fill") +
scale_fill_manual(values = c("#3D5B59","#B5E5CF","#FCB5AC"))+
labs(y="Porcentaje",x="Precariedad")
##Grafico IPCF según precariedad
#Calculo los datos de porcentaje de casos
df %>% group_by(precariedad, complejidad) %>%
count() %>%
ungroup() %>%
group_by(precariedad) %>%
mutate(porc=n/sum(n)) %>%
ungroup() %>%
select(precariedad, complejidad, porc) %>%
ggplot(aes(x = precariedad , y=porc)) +     #Armo grafico de barras
geom_bar(aes(fill=complejidad), stat="identity", position = "fill") +
scale_fill_manual(values = c("#3D5B59","#B5E5CF","#FCB5AC"))+
labs(y="Porcentaje",x="Precariedad")
#Genero vector de variables para correr test sobre todas las columnas
variables <- ls(df_chi)
df <- readRDS('EPH2019_3.Rds')
df <- df %>%
select(ESTADO, CAT_OCUP, REGION, CH04, CH06, CH12, CH13, PP04D_COD, PP04B_COD, PP07H, #Nos quedamos con las variables que utlizaremos
PP04C, PP04C99, PP04G, V5_M, DECCFR, CODUSU, NRO_HOGAR)
#Generamos variable sobre complejidad del puesto de trabajo 'Baja', 'Media' o 'Alta', utilizando el paquete occupationcross
df <- reclassify_to_isco08(base = df , variable = PP04D_COD, classif_origin = 'CNO2017', add_skill = T)
#La traducimos al español
df <- df %>%
mutate(complejidad= factor(case_when(skill_level=='Low' ~ 'Baja',
skill_level=='Medium' ~ 'Media',
skill_level=='High' ~ 'Alta'),
levels= c('Baja', 'Media', 'Alta')))
#Generamos otras variables
df <- df %>%
#Rango Etario
mutate(rango_etario= factor(case_when(CH06 < 25 ~ 'Joven',
CH06 %in% 25:40 ~ 'Joven adulto',
CH06 %in% 41:59 ~ 'Adulto',
CH06 > 59 ~ 'Adulto mayor'),
levels= c('Joven', 'Joven adulto', 'Adulto', 'Adulto mayor')),
#Precariedad laboral (tomando como referencia realización de aportes jubilatorios)
precariedad= factor(case_when(PP07H == 1 ~ "No precario",
PP07H == 2 ~ "Precario"),
levels= c('No precario', 'Precario')),
#Tamaño del establecimiento
tamanio= factor(case_when(PP04C %in% 1:6  |(PP04C %in% 99 & PP04C99 == 1)~ "Pequeño",
PP04C %in% 7:8  ~ "Mediano",
PP04C %in% 9:12 |(PP04C %in% 99 & PP04C99 == 3)~ "Grande"),
levels= c('Pequeño', 'Mediano', 'Grande')),
#Nivel educativo
nivel_educativo= factor(case_when(CH12 %in% 1:3 ~ 'Primario',
CH12 %in% 4:6 & CH13==2 ~ 'Primario',
CH12 %in% 4:6 & CH13==1 ~ 'Secundario',
CH12 %in% 7:8 & CH13==2 ~ 'Secundario',
CH12 %in% 7:8 & CH13==1 ~ 'Universitario'),
levels= c('Primario', 'Secundario', 'Universitario')),
#Teletrabajo
teletrabajo=factor(case_when(str_sub(PP04D_COD, start= 3, end =3) == 3 &
(PP04G == 6)~ "teletrabajo",
TRUE~"presencial")),
#Sector
sector = factor (case_when(str_sub(PP04B_COD, start = 1, end = 3) < 04 ~ "agro",
str_sub(PP04B_COD, start = 1, end = 3) > 04 &(str_sub(PP04B_COD, start = 1, end = 3) < 10) ~ "extractivo",
str_sub(PP04B_COD, start = 1, end = 3)> 09 &(str_sub(PP04B_COD, start = 1, end = 3) < 35) ~ "industria_manuf",
str_sub(PP04B_COD, start = 1, end = 3) > 34 &(str_sub(PP04B_COD, start = 1, end = 3) < 40) ~ "ss_publico",
str_sub(PP04B_COD, start = 1, end = 3) == 40 ~ "construcción",
str_sub(PP04B_COD, start = 1, end = 3) > 44 &(str_sub(PP04B_COD, start = 1, end = 3) < 54) ~ "comercio_y_transporte",
str_sub(PP04B_COD, start = 1, end = 3) > 44 &(str_sub(PP04B_COD, start = 1, end = 3) < 97) ~ "ss_personales_y_prof",
TRUE ~ "ss_domestico_y_otros"),
levels=c("agro", "extractivo", "industria_manuf",
"ss_publico","construcción", "comercio_y_transporte",
"ss_personales_y_prof", "ss_domestico_y_otros")),
#Genero
genero= factor(case_when(CH04== 1 ~ "hombre", TRUE~ "mujer"),
levels= c("hombre", 'mujer')),
#Region
region = factor(case_when(REGION == 01 ~ "Gran Buenos Aires",
REGION == 40 ~ "NOA",
REGION == 41 ~ "NEA",
REGION == 42 ~ "Cuyo",
REGION == 43 ~ "Pampeana",
REGION == 44 ~ "Patagonia"),
levels= c("Gran Buenos Aires", 'NOA', 'NEA', "Cuyo", "Pampeana", "Patagonia")),
ipcf = factor(case_when(DECCFR %in% 1:5  ~ "bajo",            ### VERIFICAR: Hice cambios en esta variable xq la catetgoría alta tenia 0 registros
DECCFR %in% 6:8  ~ "medio",
DECCFR %in% 9:10  ~ "alto"),
levels = c("bajo", "medio", "alto")),
subsidio = factor(case_when(V5_M == 0 ~ "no", TRUE~ "si"),
levels = c("no", "si")),
dependiente_cuidados= case_when(
CH06 < 18 | CH06 > 75   ~ "Dependiente",    #Menores 18 y adultos mayores de 75
TRUE       ~ "No dependiente")) %>%
group_by(CODUSU,NRO_HOGAR) %>%
mutate(qdependientes = sum(dependiente_cuidados=="Dependiente"),
dependientes= case_when(
qdependientes>0 ~ "Hogar con dependientes",
TRUE            ~ "Hogar sin dependientes")) %>%
ungroup()  %>%
filter(ESTADO==1 & CAT_OCUP==3) %>%                                 #Filtramos a asalariados ocupados
select(precariedad, genero, nivel_educativo, rango_etario,
sector, tamanio, complejidad, teletrabajo, subsidio, ipcf, dependientes, PONDERA) # Nos quedamos con las variables que entran para el modelo
df <- readRDS('EPH2019_3.Rds')
df <- df %>%
select(ESTADO, CAT_OCUP, REGION, CH04, CH06, CH12, CH13, PP04D_COD, PP04B_COD, PP07H, #Nos quedamos con las variables que utlizaremos
PP04C, PP04C99, PP04G, V5_M, DECCFR, CODUSU, NRO_HOGAR)
#Generamos variable sobre complejidad del puesto de trabajo 'Baja', 'Media' o 'Alta', utilizando el paquete occupationcross
df <- reclassify_to_isco08(base = df , variable = PP04D_COD, classif_origin = 'CNO2017', add_skill = T)
#La traducimos al español
df <- df %>%
mutate(complejidad= factor(case_when(skill_level=='Low' ~ 'Baja',
skill_level=='Medium' ~ 'Media',
skill_level=='High' ~ 'Alta'),
levels= c('Baja', 'Media', 'Alta')))
#Generamos otras variables
df <- df %>%
#Rango Etario
mutate(rango_etario= factor(case_when(CH06 < 25 ~ 'Joven',
CH06 %in% 25:40 ~ 'Joven adulto',
CH06 %in% 41:59 ~ 'Adulto',
CH06 > 59 ~ 'Adulto mayor'),
levels= c('Joven', 'Joven adulto', 'Adulto', 'Adulto mayor')),
#Precariedad laboral (tomando como referencia realización de aportes jubilatorios)
precariedad= factor(case_when(PP07H == 1 ~ "No precario",
PP07H == 2 ~ "Precario"),
levels= c('No precario', 'Precario')),
#Tamaño del establecimiento
tamanio= factor(case_when(PP04C %in% 1:6  |(PP04C %in% 99 & PP04C99 == 1)~ "Pequeño",
PP04C %in% 7:8  ~ "Mediano",
PP04C %in% 9:12 |(PP04C %in% 99 & PP04C99 == 3)~ "Grande"),
levels= c('Pequeño', 'Mediano', 'Grande')),
#Nivel educativo
nivel_educativo= factor(case_when(CH12 %in% 1:3 ~ 'Primario',
CH12 %in% 4:6 & CH13==2 ~ 'Primario',
CH12 %in% 4:6 & CH13==1 ~ 'Secundario',
CH12 %in% 7:8 & CH13==2 ~ 'Secundario',
CH12 %in% 7:8 & CH13==1 ~ 'Universitario'),
levels= c('Primario', 'Secundario', 'Universitario')),
#Teletrabajo
teletrabajo=factor(case_when(str_sub(PP04D_COD, start= 3, end =3) == 3 &
(PP04G == 6)~ "teletrabajo",
TRUE~"presencial")),
#Sector
sector = factor (case_when(str_sub(PP04B_COD, start = 1, end = 3) < 04 ~ "agro",
str_sub(PP04B_COD, start = 1, end = 3) > 04 &(str_sub(PP04B_COD, start = 1, end = 3) < 10) ~ "extractivo",
str_sub(PP04B_COD, start = 1, end = 3)> 09 &(str_sub(PP04B_COD, start = 1, end = 3) < 35) ~ "industria_manuf",
str_sub(PP04B_COD, start = 1, end = 3) > 34 &(str_sub(PP04B_COD, start = 1, end = 3) < 40) ~ "ss_publico",
str_sub(PP04B_COD, start = 1, end = 3) == 40 ~ "construcción",
str_sub(PP04B_COD, start = 1, end = 3) > 44 &(str_sub(PP04B_COD, start = 1, end = 3) < 54) ~ "comercio_y_transporte",
str_sub(PP04B_COD, start = 1, end = 3) > 44 &(str_sub(PP04B_COD, start = 1, end = 3) < 97) ~ "ss_personales_y_prof",
TRUE ~ "ss_domestico_y_otros"),
levels=c("agro", "extractivo", "industria_manuf",
"ss_publico","construcción", "comercio_y_transporte",
"ss_personales_y_prof", "ss_domestico_y_otros")),
#Genero
genero= factor(case_when(CH04== 1 ~ "hombre", TRUE~ "mujer"),
levels= c("hombre", 'mujer')),
#Region
region = factor(case_when(REGION == 01 ~ "Gran Buenos Aires",
REGION == 40 ~ "NOA",
REGION == 41 ~ "NEA",
REGION == 42 ~ "Cuyo",
REGION == 43 ~ "Pampeana",
REGION == 44 ~ "Patagonia"),
levels= c("Gran Buenos Aires", 'NOA', 'NEA', "Cuyo", "Pampeana", "Patagonia")),
ipcf = factor(case_when(DECCFR %in% 1:5  ~ "bajo",            ### VERIFICAR: Hice cambios en esta variable xq la catetgoría alta tenia 0 registros
DECCFR %in% 6:8  ~ "medio",
DECCFR %in% 9:10  ~ "alto"),
levels = c("bajo", "medio", "alto")),
subsidio = factor(case_when(V5_M == 0 ~ "no", TRUE~ "si"),
levels = c("no", "si")),
dependiente_cuidados= case_when(
CH06 < 18 | CH06 > 75   ~ "Dependiente",    #Menores 18 y adultos mayores de 75
TRUE       ~ "No dependiente")) %>%
group_by(CODUSU,NRO_HOGAR) %>%
mutate(qdependientes = sum(dependiente_cuidados=="Dependiente"),
dependientes= case_when(
qdependientes>0 ~ "Hogar con dependientes",
TRUE            ~ "Hogar sin dependientes")) %>%
ungroup()  %>%
filter(ESTADO==1 & CAT_OCUP==3) %>%                                 #Filtramos a asalariados ocupados
select(precariedad, genero, nivel_educativo, rango_etario,
sector, tamanio, complejidad, teletrabajo, subsidio, ipcf, dependientes) # Nos quedamos con las variables que entran para el modelo
#Chequeamos cuantas missings hay
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
#Nos quedamos con casos sin missings
df <- df[complete.cases(df), ]
### Hice la prueba con el boxplot, pero no me convence mucho. También hice la prueba graficando en un plot de barras apiladas los porcentajes de casos en cada categoría.
#Boxplot convirtiedo en numérica las categóricas que son ordinales
df %>% mutate(ipcf2=case_when(ipcf=="bajo"  ~ 1,
ipcf=="medio" ~ 2,
ipcf=="alto"  ~ 3)) %>%
ggplot(aes(x = precariedad , y =as.numeric(ipcf2))) +
geom_boxplot(aes(fill=precariedad))
##Grafico IPCF según precariedad
#Calculo los datos de porcentaje de casos
df %>% group_by(precariedad, ipcf) %>%
count() %>%
ungroup() %>%
group_by(precariedad) %>%
mutate(porc=n/sum(n)) %>%
ungroup() %>%
select(precariedad, ipcf, porc) %>%
ggplot(aes(x = precariedad , y=porc)) +     #Armo grafico de barras
geom_bar(aes(fill=ipcf), stat="identity", position = "fill") +
scale_fill_manual(values = c("#3D5B59","#B5E5CF","#FCB5AC"))+
labs(y="Porcentaje",x="Precariedad")
##Grafico IPCF según precariedad
#Calculo los datos de porcentaje de casos
df %>% group_by(precariedad, complejidad) %>%
count() %>%
ungroup() %>%
group_by(precariedad) %>%
mutate(porc=n/sum(n)) %>%
ungroup() %>%
select(precariedad, complejidad, porc) %>%
ggplot(aes(x = precariedad , y=porc)) +     #Armo grafico de barras
geom_bar(aes(fill=complejidad), stat="identity", position = "fill") +
scale_fill_manual(values = c("#3D5B59","#B5E5CF","#FCB5AC"))+
labs(y="Porcentaje",x="Precariedad")
#Genero vector de variables para correr test sobre todas las columnas
variables <- ls(df)
#Genero lista en donde guardo las tablas con los chi2 para cada variable
chiList <- list()
#Con este loop voy guardando los chi2 en una lista
for (i in 1:length(variables)) {
#Estimo test
CHIS <- lapply(df_chi[,-i], function(x) chisq.test(df_chi[,i], x))
#Imprimo resultados
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE)
#Los guardo en una lista
chiList[[variables[i]]] <- tabla_chi
}
#Genero vector de variables para correr test sobre todas las columnas
variables <- ls(df)
#Genero lista en donde guardo las tablas con los chi2 para cada variable
chiList <- list()
#Con este loop voy guardando los chi2 en una lista
for (i in 1:length(variables)) {
#Estimo test
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
#Imprimo resultados
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE)
#Los guardo en una lista
chiList[[variables[i]]] <- tabla_chi
}
chiList#[["complejidad"]]
#Genero vector de variables para correr test sobre todas las columnas
variables <- ls(df)
#Genero lista en donde guardo las tablas con los chi2 para cada variable
chiList <- list()
#Con este loop voy guardando los chi2 en una lista
for (i in 1:length(variables)) {
#Estimo test
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
#Imprimo resultados
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE)
#Los guardo en una lista
chiList[[variables[i]]] <- as.data.frame(tabla_chi)
}
chiList
View(chiList)
chiList[["complejidad"]]
i=1
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE) %>% as.data.frame()
View(tabla_chi)
#Genero data frame para hacer la matriz
chiMatriz <- as.data.frame(variables)
View(chiMatriz)
View(tabla_chi)
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE) %>%
as.data.frame() %>%
select(.id, p.value)
View(tabla_chi)
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id"))
View(chiMatriz)
chiMatriz <- as.data.frame(variables)
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id")) %>%
rename(.id=get(variables[i]))
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id")) %>%
rename(get(variables[i])=.id)
chiMatriz <- as.data.frame(variables)
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id")) %>%
rename(get(variables[i])=.id)
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id"))
chiMatriz <- as.data.frame(variables)
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id")) %>%
rename(paste0(variables[i])=.id)
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id")) %>%
rename(get(variables[i])=.id)
colnames(chiMAtriz[".id"]) <- paste0([variables[i])
colnames(chiMAtriz[".id"]) <- paste0(variables[i])
colnames(chiMatriz[".id"]) <- paste0(variables[i])
paste0(variables[i])
chiMatriz[".id"]
chiMatriz[, -1]
colnames(chiMatriz[, -1]) <- paste0(variables[i])
chiMatriz <- as.data.frame(variables)
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE) %>%
as.data.frame() %>%
select(.id, p.value)
View(tabla_chi)
colnames(tabla_chi)[2] <- variables[i]
View(tabla_chi)
#Genero vector de variables para correr test sobre todas las columnas
variables <- ls(df)
#Genero lista en donde guardo las tablas con los chi2 para cada variable
chiList <- list()
#Genero data frame para hacer la matriz
chiMatriz <- as.data.frame(variables)
#Con este loop voy guardando los chi2 en una lista
for (i in 1:length(variables)) {
#Estimo test
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
#Imprimo resultados (solo variables y p-value)
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE) %>%
as.data.frame() %>%
select(.id, p.value)
colnames(tabla_chi)[2] <- variables[i]
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id"))
}
View(chiMatriz)
#Genero vector de variables para correr test sobre todas las columnas
variables <- ls(df)
#Genero lista en donde guardo las tablas con los chi2 para cada variable
chiList <- list()
#Genero data frame para hacer la matriz
chiMatriz <- as.data.frame(variables)
#Con este loop voy guardando los chi2 en una lista
for (i in 1:length(variables)) {
#Estimo test
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
#Imprimo resultados (solo variables y p-value)
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE) %>%
as.data.frame() %>%
select(.id, p.value) %>%
mutate(.id=round(.id, 2))
colnames(tabla_chi)[2] <- variables[i]
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id"))
}
#Genero vector de variables para correr test sobre todas las columnas
variables <- ls(df)
#Genero lista en donde guardo las tablas con los chi2 para cada variable
chiList <- list()
#Genero data frame para hacer la matriz
chiMatriz <- as.data.frame(variables)
#Con este loop voy guardando los chi2 en una lista
for (i in 1:length(variables)) {
#Estimo test
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
#Imprimo resultados (solo variables y p-value)
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE) %>%
as.data.frame() %>%
select(.id, p.value)
colnames(tabla_chi)[2] <- variables[i]
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id"))
}
View(chiMatriz)
chiMatriz <- as.data.frame(variables)
View(chiMatriz)
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
#Imprimo resultados (solo variables y p-value)
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE) %>%
as.data.frame() %>%
select(.id, p.value)
colnames(tabla_chi)[2] <- variables[i]
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id"))
View(chiMatriz)
View(tabla_chi)
variables[i]
i=2
chiMatriz <- as.data.frame(variables)
View(chiMatriz)
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
View(CHIS)
df[,i]
df[,i]
df[,-i]
df[,-i]
ls(df)
View(df)
df <- df %>%
select(sort(names(.)))
#Ordeno las variables alfabeticamente para no tener lio en el loop y que el vector de nombres coincida con el indice de posicion
df <- df %>%
select(sort(names(.)))
#Genero vector de variables para correr test sobre todas las columnas
variables <- ls(df)
#Genero lista en donde guardo las tablas con los chi2 para cada variable
chiList <- list()
chiMatriz <- as.data.frame(variables)
#Con este loop voy guardando los chi2 en una lista
for (i in 1:length(variables)) {
#Estimo test
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
#Imprimo resultados (solo variables y p-value)
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE) %>%
as.data.frame() %>%
select(.id, p.value)
colnames(tabla_chi)[2] <- variables[i]
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id"))
}
View(chiMatriz)
chiMatriz <- chiMatriz %>%
mutate_if(is.numeric, round)
#Ordeno las variables alfabeticamente para no tener lio en el loop y que el vector de nombres coincida con el indice de posicion
df <- df %>%
select(sort(names(.)))
#Genero vector de variables para correr test sobre todas las columnas
variables <- ls(df)
#Genero data frame para hacer la matriz
chiMatriz <- as.data.frame(variables)
#Con este loop voy guardando los chi2 en una lista
for (i in 1:length(variables)) {
#Estimo test
CHIS <- lapply(df[,-i], function(x) chisq.test(df[,i], x))
#Imprimo resultados (solo variables y p-value)
tabla_chi <- rbindlist(lapply(CHIS, tidy), idcol=TRUE) %>%
as.data.frame() %>%
select(.id, p.value)
colnames(tabla_chi)[2] <- variables[i]
chiMatriz <- chiMatriz %>%
left_join(tabla_chi, by= c("variables"=".id"))
}
chiMatriz <- chiMatriz %>%
mutate_if(is.numeric, round(, 4))
chiMatriz <- chiMatriz %>%
mutate_if(is.numeric, round(., 4))
is.numeric(chiMatriz[, 3])
chiMatriz[,-1] <-round(chiMatriz[,-1],4)
print(chiMatriz)
View(chiMatriz)
